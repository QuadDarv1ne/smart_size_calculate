import json
from pathlib import Path
from enum import Enum
import logging

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è rich
try:
    from rich.console import Console
    from rich.table import Table
    from rich.progress import Progress
    from rich import print
    rich_installed = True
except ImportError:
    rich_installed = False
    print("–ú–æ–¥—É–ª—å 'rich' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–≤–æ–¥ –±—É–¥–µ—Ç –º–µ–Ω–µ–µ –Ω–∞–≥–ª—è–¥–Ω—ã–º. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 'rich' —á–µ—Ä–µ–∑: pip install rich")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤ (–≤—ã–Ω–µ—Å–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä—å)
SIZE_LIMITS = {
    "XS": 40,
    "S": 42,
    "M": 46,
    "L": 50,
    "XL": 54,
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–æ—Å—Ç–∞
HEIGHT_CATEGORIES = {
    150: "Very Petite",
    160: "Petite",
    190: "Tall",
    200: "Very Tall"
}

# Enum –¥–ª—è –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è —Ä–∞–∑–º–µ—Ä–æ–≤
class SizeType(Enum):
    INTERNATIONAL = "1Ô∏è‚É£  International"
    RU = "2Ô∏è‚É£  RU"
    EU = "3Ô∏è‚É£  EU"
    US = "4Ô∏è‚É£  US"
    UK = "5Ô∏è‚É£  UK"
    HEIGHT_CATEGORY = "6Ô∏è‚É£  Height Category"

def calculate_sizes(chest: int, waist: int, hips: int, height: int) -> dict:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.

    Args:
        chest: üéΩ –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (–≤ —Å–º)
        waist: üìè –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (–≤ —Å–º)
        hips: üçë –û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä (–≤ —Å–º)
        height: üßç –†–æ—Å—Ç (–≤ —Å–º)

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –∫–ª—é—á–∞–º–∏ —Ç–∏–ø–∞ SizeType.
    Raises:
        ValueError: –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.
    """
    if not all(isinstance(arg, int) and arg >= 0 for arg in [chest, waist, hips, height]):
        raise ValueError("–†–∞–∑–º–µ—Ä—ã –∏ —Ä–æ—Å—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
    
    russian_size = (chest - 4) // 2
    intl_size = get_intl_size(russian_size)
    eu_size = russian_size + 6
    us_size = russian_size - 34
    uk_size = us_size
    height_category = get_height_category(height)

    return {
        SizeType.INTERNATIONAL: intl_size,
        SizeType.RU: russian_size,
        SizeType.EU: eu_size,
        SizeType.US: us_size,
        SizeType.UK: uk_size,
        SizeType.HEIGHT_CATEGORY: height_category,
    }

def get_intl_size(ru_size: int) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.

    Args:
        ru_size: –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä.

    Returns:
        –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—Å—Ç—Ä–æ–∫–∞).
    """
    if ru_size <= SIZE_LIMITS["XS"]:
        return "XS"
    elif ru_size <= SIZE_LIMITS["S"]:
        return "S"
    elif ru_size <= SIZE_LIMITS["M"]:
        return "M"
    elif ru_size <= SIZE_LIMITS["L"]:
        return "L"
    elif ru_size <= SIZE_LIMITS["XL"]:
        return "XL"
    else:
        return "XXL"


def get_height_category(height: int) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ—Å—Ç–∞ —á–µ–ª–æ–≤–µ–∫–∞.

    Args:
        height: –†–æ—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞ (–≤ —Å–º).

    Returns:
        –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–æ—Å—Ç–∞ (—Å—Ç—Ä–æ–∫–∞).
    """
    sorted_heights = sorted(HEIGHT_CATEGORIES.keys())
    
    if height < sorted_heights[0]:
        return HEIGHT_CATEGORIES[sorted_heights[0]]
    for i in range(len(sorted_heights) - 1):
        if sorted_heights[i] <= height < sorted_heights[i+1]:
           return "Regular"
    return HEIGHT_CATEGORIES[sorted_heights[-1]]

def display_sizes(sizes: dict, console:Console):
    """
    –í—ã–≤–æ–¥–∏—Ç —Ä–∞–∑–º–µ—Ä—ã –≤ —É–¥–æ–±–Ω–æ–π —Ñ–æ—Ä–º–µ.

    Args:
         sizes: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏, –≥–¥–µ –∫–ª—é—á–∏ —Ç–∏–ø–∞ SizeType.
         console: Rich Console –¥–ª—è –≤—ã–≤–æ–¥–∞.
    """
    console.print("\n[bold blue]‚ú® –í–∞—à–∏ —Ä–∞–∑–º–µ—Ä—ã:[/bold blue]")
    for key, value in sizes.items():
         console.print(f"[green]{key.value}:[/green] [cyan]{value}[/cyan]")

def load_user_data_from_json(filename: str, console: Console) -> dict | None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON —Ñ–∞–π–ª–∞.

    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞.
        console: Rich Console –¥–ª—è –≤—ã–≤–æ–¥–∞.

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    file_path = Path(filename)

    if not file_path.exists():
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        logging.error(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return None

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
            if not all(key in data for key in ["chest", "waist", "hips", "height"]):
                console.print("[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (chest, waist, hips, height).")
                logging.error("–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (chest, waist, hips, height).")
                return None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
            if not all(isinstance(value, (int, float)) for value in data.values()):
                console.print("[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –ó–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
                logging.error("–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
                return None
            
            #–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if not validate_user_data(data, console):
                return None

            return data
    except json.JSONDecodeError:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç JSON.")
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç JSON.")
        return None
    except Exception as e:
      console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
      logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
      return None
    
def validate_user_data(data:dict, console:Console) -> bool:
    """
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Args:
        data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console: Rich Console –¥–ª—è –≤—ã–≤–æ–¥–∞.
    Returns:
         True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
    """
    try:
        if not (0 < data["chest"] < 250 and 0 < data["waist"] < 200 and 0 < data["hips"] < 250 and 50 < data["height"] < 250):
             console.print("[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã.")
             logging.error("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã.")
             return False
    except (TypeError, KeyError) as e:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:[/bold red] {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    return True

def main():
    if rich_installed:
        console = Console()
        console.print("[bold magenta]‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ üëã[/bold magenta]")
    else:
        console = None
        print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ üëã\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    if console:
        user_data = load_user_data_from_json("user_data.json", console)
    else:
       user_data = load_user_data_from_json("user_data.json", None)
    
    if not user_data:
        if console:
           user_data = input_user_data(console) #–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
        else:
            user_data = input_user_data(None)

    
    if user_data:
        if console:
            table = Table(title="[bold green]‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã[/bold green]")
            table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
            table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="magenta")
            for key, value in user_data.items():
                table.add_row(key, f"{value} —Å–º")
            console.print(table)
            logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        else:
            print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
            for key, value in user_data.items():
                print(f"{key}: {value} —Å–º")


        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤
        try:
            with Progress(transient=True) as progress:
                 task_id = progress.add_task("[bold blue]üîÑ –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤...[/bold blue]", total=1)
                 sizes = calculate_sizes(
                    chest=int(user_data["chest"]),
                    waist=int(user_data["waist"]),
                    hips=int(user_data["hips"]),
                    height=int(user_data["height"]),
                    )
                 progress.update(task_id, advance=1)

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if console:
                display_sizes(sizes, console)
            else:
                display_sizes(sizes)
            
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            if console and input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª? (y/n): ").lower() == "y":
                 save_sizes_to_json(sizes, "sizes_report.json", console)
            elif not console and input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª? (y/n): ").lower() == "y":
                 save_sizes_to_json(sizes, "sizes_report.json", None)
            else:
                 if console:
                    console.print("\n[bold blue]üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.[/bold blue]")
                 else:
                    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        except ValueError as ve:
            if console:
               console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:[/bold red] {ve}")
            else:
                print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {ve}")
            logging.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {ve}")
        except Exception as e:
             if console:
                console.print(f"[bold red]‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ä–∞–∑–º–µ—Ä–æ–≤:[/bold red] {e}")
             else:
                 print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")
             logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")
    else:
       if console:
           console.print("[bold red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.[/bold red]")
       else:
           print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")


def save_sizes_to_json(sizes: dict, filename: str, console: Console):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –≤ JSON —Ñ–∞–π–ª.

    Args:
        sizes: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏, –≥–¥–µ –∫–ª—é—á–∏ —Ç–∏–ø–∞ SizeType.
        filename: –ò–º—è —Ñ–∞–π–ª–∞.
        console: Rich Console –¥–ª—è –≤—ã–≤–æ–¥–∞.
    """
    file_path = Path(filename)
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ Enum –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON
            sizes_to_save = {key.value: value for key, value in sizes.items()}
            json.dump(sizes_to_save, f, ensure_ascii=False, indent=4)
        if console:
             console.print(f"[bold green]‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}[/bold green]")
        else:
             print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")
    except Exception as e:
        if console:
           console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª {filename}:[/bold red] {e}")
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª {filename}: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª {filename}: {e}")

def input_user_data(console: Console) -> dict:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    Args:
         console: Rich Console –¥–ª—è –≤—ã–≤–æ–¥–∞.
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if console:
        console.print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:")
    else:
         print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:")
    while True:
        try:
           if console:
              chest = int(console.input("[cyan]–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º):[/cyan] "))
              waist = int(console.input("[cyan]–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (—Å–º):[/cyan] "))
              hips = int(console.input("[cyan]–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä (—Å–º):[/cyan] "))
              height = int(console.input("[cyan]–†–æ—Å—Ç (—Å–º):[/cyan] "))
           else:
              chest = int(input("–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º): "))
              waist = int(input("–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (—Å–º): "))
              hips = int(input("–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä (—Å–º): "))
              height = int(input("–†–æ—Å—Ç (—Å–º): "))

           data = {
            "chest": chest,
            "waist": waist,
            "hips": hips,
            "height": height
            }
           if validate_user_data(data, console):
              return data
           else:
                if console:
                  console.print("[bold red]‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.[/bold red]")
                else:
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except ValueError:
           if console:
              console.print("[bold red]‚ùå –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.[/bold red]")
           else:
                print("–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.")
        except Exception as e:
           logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
           if console:
               console.print(f"[bold red]‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:[/bold red] {e}")
           else:
               print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    main()
